--- 
class: Resource
header: ris_lib/template.h
namespace: ris
resources: 
  - 
    name: header_preamble
    source: "/* This file has been generated using ris, do not modify! */\n"
    source_type: string
  - 
    name: header_includes
    source: "#include <string>\n"
    source_type: string
  - 
    name: class_name
    source: Resource
    source_type: string
  - 
    name: source_preamble
    source: "/* This file has been generated using ris, do not modify! */"
    source_type: string
  - 
    name: source_includes
    source: "#include <unordered_map>"
    source_type: string
  - 
    name: header
    source: |
        #pragma once
        {{header_preamble}}
        {{header_includes}}
        namespace {{namespace_name}} {
        class {{class_name}} /*final*/ {
        public:
        {{header_declarations}}
        public:
            typedef std::string(*ResourceGetter)();
        public: // key/value api
        template <typename TInserter>
        static void GetKeys(TInserter inserter) {
            static const char* keys[] = {
        {{header_resource_names}}    };
            for (auto key : keys) {
                inserter(key);
            }
        }
        public: // key/value api
            static std::string Get(std::string const& key);
        {{header_on_no_key}}};
        }
    source_type: string
  - 
    name: source
    source: |
        {{source_preamble}}
        {{source_default_include}}
        {{source_includes}}
        {{optional_compression_header}}namespace {{namespace_name}} {
        {{source_definitions}}std::string Resource::Get(std::string const& key) {
            static std::unordered_map<std::string,ResourceGetter> getters = {
        {{source_getters}}    };
            auto getter = getters.find(key);
            if (getter == getters.end())
                 return OnNoKey(key);
            return getter->second();
        }
        }
    source_type: string
  - 
    name: header_single_declaration
    source: "    static std::string {{resource_member_name}}();\n"
    source_type: string
  - 
    name: source_single_definition
    source: |
        std::string Resource::{{resource_member_name}}() {
            static char const literal[] = {{{source_literal_bytes}}
            };
        {{source_return_literal}}
        }
    source_type: string
  - 
    name: source_single_getter
    source: "        { \"{{resource_name}}\", {{class_name}}::{{resource_member_name}} },\n"
    source_type: string
  - 
    name: header_single_resource_name
    source: "        \"{{resource_name}}\",\n"
    source_type: string
  - 
    name: source_return_plain_literal
    source: "    return std::string(literal, sizeof(literal)/sizeof(char));"
    source_type: string
  - 
    name: source_return_compressed_literal
    source: "    return bundle::unpack(std::string(literal, sizeof(literal)/sizeof(char)));"
    source_type: string
  - 
    name: header_on_no_key
    source: |
        public:
            static std::string OnNoKey(std::string const& key="") {
                return "";
            }
    source_type: string
source: ris_lib/template.cpp
